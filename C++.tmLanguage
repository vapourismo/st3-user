<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>cpp</string>
		<string>cc</string>
		<string>cp</string>
		<string>cxx</string>
		<string>c++</string>
		<string>C</string>
		<string>hh</string>
		<string>hpp</string>
		<string>hxx</string>
		<string>h++</string>
		<string>inl</string>
		<string>ipp</string>
	</array>
	<key>name</key>
	<string>Vapourismo - C++</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#global</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<!-- global syntax -->
		<key>global</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#punctuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#include_directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#define_directive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#preprocessor_directives</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#char_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#using_namespace</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#keywords</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special_entities</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#special_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage_types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#known_types</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typedef</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#modifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type_ptr_conv</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cpp_casts</string>
				</dict>
				<!-- <dict>
					<key>include</key>
					<string>#tpltype</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#vardecl</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#rettypedecl</string>
				</dict> -->
				<dict>
					<key>include</key>
					<string>#const_types</string>
				</dict>
			</array>
		</dict>

		<key>tpltype</key>
		<dict>
			<key>match</key>
			<string>([a-zA-Z_][a-zA-Z0-9_]*)&lt;</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
			</dict>
		</dict>

		<key>vardecl</key>
		<dict>
			<key>match</key>
			<string>([a-zA-Z_][a-zA-Z0-9_]*)\b\s*(const\s*)?([\*&amp;]*)\s*((const\s+)|(restrict\s+))*\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*(=|,|;|\)|\[)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.modifier.c++</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.modifier.c++</string>
				</dict>
			</dict>
		</dict>

		<key>rettypedecl</key>
		<dict>
			<key>match</key>
			<string>(\w+\s+|^\s*)([a-zA-Z_][a-zA-Z0-9_]*)\b\s*(const\s*)?([\*&amp;]*)\s*((const\s+)|(restrict\s+))*\b([a-zA-Z_][a-zA-Z0-9_]*)\b\s*\(</string>
			<key>captures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.modifier.c++</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.modifier.c++</string>
				</dict>
			</dict>
		</dict>

		<!-- punctuation -->
		<key>punctuation</key>
		<dict>
			<key>match</key>
			<string>(\.|\-&gt;|:|\?|\.\.\.|[&lt;&gt;=\*/\+\-|&amp;\^%!]+)</string>
			<key>name</key>
			<string>keyword.operator.c++</string>
		</dict>

		<!-- keywords -->
		<key>keywords</key>
		<dict>
			<key>match</key>
			<string>\b(delete|friend|extern|static|inline|virtual|operator|try|catch|throw|return|private|public|protected|typeid|sizeof|sizeof\.\.\.|decltype|template|if|while|for|do|switch|case|default|break|continue|else|new|static_assert|constexpr|noexcept|using)\b</string>
			<key>name</key>
			<string>keyword.control.c++</string>
		</dict>

		<!-- modifiers -->
		<key>modifiers</key>
		<dict>
			<key>match</key>
			<string>\b(volatile|const|unsigned|signed)\b</string>
			<key>name</key>
			<string>storage.type.modifier.c++</string>
		</dict>

		<!-- known types -->
		<key>known_types</key>
		<dict>
			<key>match</key>
			<string>\b(void|char|short|int|long|bool|double|float|va_list|([a-zA-Z_][a-zA-Z0-9_]*_t)|typename|auto)\b</string>
			<key>name</key>
			<string>storage.type.c++</string>
		</dict>

		<!-- (type*) xyz -->
		<key>type_ptr_conv</key>
		<dict>
			<key>match</key>
			<string>\(\s*(const\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\s*([\*]+|&amp;)\s*\)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.modifier.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
			</dict>
		</dict>

		<key>const_types</key>
		<dict>
			<key>match</key>
			<string>(const|volatile)\s+([a-zA-Z_][a-zA-Z0-9_]*)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.modifier.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
			</dict>
		</dict>


		<!-- functions -->
		<key>functions</key>
		<dict>
			<key>match</key>
			<string>([a-zA-Z_][a-zA-Z0-9_]*)\s*\(</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.c++</string>
				</dict>
			</dict>
		</dict>

		<!-- tpl_functions -->
		<key>tpl_functions</key>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_][a-zA-Z0-9_]*)\s*&lt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>support.function.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;\s*\(</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_path</string>
				</dict>
			</array>
		</dict>

		<!-- special entities -->
		<key>special_entities</key>
		<dict>
			<key>match</key>
			<string>\b(this)\b</string>
			<key>name</key>
			<string>entity.name.special.c++</string>
		</dict>

		<!-- special names -->
		<key>special_names</key>
		<dict>
			<key>match</key>
			<string>\b(false|true|nullptr|NULL)\b</string>
			<key>name</key>
			<string>constant.c++</string>
		</dict>

		<!-- storage types -->
		<key>storage_types</key>
		<dict>
			<key>match</key>
			<string>\b(class|struct|enum\s+class|enum|union|namespace)\b\s*([a-zA-Z_][a-zA-Z0-9_]*)?\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.storage.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
			</dict>
		</dict>

		<!-- number literals -->
		<key>number_literal</key>
		<dict>
			<key>match</key>
			<string>\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b</string>
			<key>name</key>
			<string>constant.numeric.c++</string>
		</dict>

		<!-- string literals -->
		<key>string_literal</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c++</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string_placeholder</string>
				</dict>
			</array>
		</dict>

		<!-- character literals -->
		<key>char_literal</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.c++</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.c++</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string_escaped_char</string>
				</dict>
			</array>
		</dict>

		<!-- escaped characters in string literals -->
		<key>string_escaped_char</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})</string>
					<key>name</key>
					<string>constant.character.escape.c++</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.c++</string>
				</dict>
			</array>
		</dict>

		<!-- placeholders in string literals -->
		<key>string_placeholder</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)%
    						(\d+\$)?                             # field (argument #)
    						[#0\- +']*                           # flags
    						[,;:_]?                              # separator character (AltiVec)
    						((-?\d+)|\*(-?\d+\$)?)?              # minimum field width
    						(\.((-?\d+)|\*(-?\d+\$)?)?)?         # precision
    						(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
    						[a-zA-Z%]                            # conversion type
    					</string>
					<key>name</key>
					<string>constant.other.placeholder.c++</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%</string>
					<key>name</key>
					<string>invalid.illegal.placeholder.c++</string>
				</dict>
			</array>
		</dict>

		<!-- using namespace ...; -->
		<!-- <key>using_namespace</key>
		<dict>
			<key>begin</key>
			<string>(using)\s+((namespace)\s+)?</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.c++</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.control.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>;</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_path</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comments</string>
				</dict>
			</array>
		</dict> -->

		<!-- cpp_casts -->
		<key>cpp_casts</key>
		<dict>
			<key>begin</key>
			<string><![CDATA[(reinterpret_cast|static_cast|const_cast|dynamic_cast)\s*\<]]></string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string><![CDATA[\>\s*\(]]></string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_path</string>
				</dict>
			</array>
		</dict>

		<!-- typedefs -->
		<key>typedef</key>
		<dict>
			<key>begin</key>
			<string>(typedef)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.c++</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(;|\n)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type_path</string>
				</dict>
			</array>
		</dict>

		<!-- sequence of a types/namespaces -->
		<key>type_path</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>[a-zA-Z_][a-zA-Z0-9_]*</string>
					<key>name</key>
					<string>storage.type.c++</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#number_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#char_literal</string>
				</dict>
			</array>
		</dict>

		<!-- #include <...> -->
		<key>include_directive</key>
		<dict>
			<key>match</key>
			<string><![CDATA[^\s*(#include)\s*(<[^>]+>)]]></string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>string.quoted.double.c++</string>
				</dict>
			</dict>
		</dict>

		<!-- #define MACRO(...) ... / #define MACRO ... -->
		<key>define_directive</key>
		<dict>
			<key>match</key>
			<string><![CDATA[^\s*(#define|#ifdef|#ifndef)\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*(\([^\)]+\))?]]></string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.preprocessor.c++</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.special.c++</string>
				</dict>
			</dict>
		</dict>

		<!-- preprocessor_directives -->
		<key>preprocessor_directives</key>
		<dict>
			<key>name</key>
			<string>keyword.control.c++</string>
			<key>match</key>
			<string>^\s*\#[a-zA-Z]+\s*</string>
		</dict>

		<!-- comments -->
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.block.c++</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^/\* =(\s*.*?)\s*= \*/$\n?</string>
					<key>name</key>
					<string>comment.block.c++</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.c++</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.c++</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*/.*\n</string>
					<key>name</key>
					<string>invalid.illegal.stray-comment-end.c++</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.c++</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^// =(\s*.*?)\s*=\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.c++</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.c++</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.c++</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c++</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.c++</string>
</dict>
</plist>
